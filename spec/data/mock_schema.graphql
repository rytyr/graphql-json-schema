scalar Foo

union MyUnion = Foo | String | Float

enum MyEnum {
  FIRST_ITEM
  SECOND_ITEM
  THIRD_ITEM
}

# asdadas
# adasda
type query {
# asdadas
  field_demo: String!
  field_demo_array: [String!] @validate(format:"uuid")
  field_demo_array2: [String]!
# adasda
}
#
#
type body {

}
#
#
type body2 {

#
#
}

type WithDirective {
  field_datetime: DateTime
  field_json: JSON
  field_one: Int @validate(minimum: 10)
  field_two: Int! @validate(minimum: 10, maximum: 50)
  field_three: String! @validate(maxLength: 8, format: "date-time")
  field_four: String @validate(minLength: 5, pattern: "[abc]+")
  field_five: [String] @validate(uniqueItems: true, minItems: 3)
}

type Stuff {
  my_field: Int
  req_field: String!
  recursion: MoreStuff
  custom_scalar: Foo
  enum: MyEnum
}

type MoreStuff {
  first: [Float]
  identifier: [ID]!
  reference: Stuff!
  bool: Boolean!
  union: MyUnion
  with_params: Int
}

input InputType {
  an_int: Int!
  a_string: String
}
